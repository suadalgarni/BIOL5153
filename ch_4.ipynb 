{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Homo sapiens\n"
     ]
    }
   ],
   "source": [
    "apes = [\"Homo sapiens\", \"Pan troglodytes\", \"Gorilla gorilla\"]\n",
    "print(apes[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "chimp_index = apes.index(\"Pan troglodytes\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n"
     ]
    }
   ],
   "source": [
    "print(chimp_index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Gorilla gorilla\n"
     ]
    }
   ],
   "source": [
    "print(apes[-1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['class', 'order', 'family']\n"
     ]
    }
   ],
   "source": [
    "ranks = [\"kingdom\", \"phylum\", \"class\", \"order\", \"family\"]\n",
    "lower_ranks = ranks[2:5]\n",
    "print(lower_ranks)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['class', 'order']\n"
     ]
    }
   ],
   "source": [
    "lower_ranks = ranks[2:4]\n",
    "print(lower_ranks)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "apes.append(\"Pan paniscus\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There are 4 apes in array 'apes'\n"
     ]
    }
   ],
   "source": [
    "print(\"There are \" + str(len(apes)) + \" apes in array 'apes'\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There are 4 apes in array 'apes'\n"
     ]
    }
   ],
   "source": [
    "print(\"There are \" + str(len(apes)) + \" apes in array 'apes'\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['kingdom', 'phylum', 'class', 'order', 'family', 'genus', 'species']\n"
     ]
    }
   ],
   "source": [
    "more_ranks = [\"genus\", \"species\"]\n",
    "ranks.extend(more_ranks)\n",
    "print(ranks)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "after reversing: ['species', 'genus', 'family', 'order', 'class', 'phylum', 'kingdom']\n",
      "after sorting: ['class', 'family', 'genus', 'kingdom', 'order', 'phylum', 'species']\n"
     ]
    }
   ],
   "source": [
    "ranks.reverse()\n",
    "print(\"after reversing: \" + str(ranks))\n",
    "ranks.sort()\n",
    "print(\"after sorting: \" + str(ranks))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Homo sapiens is an ape\n",
      "Pan troglodytes is an ape\n",
      "Gorilla gorilla is an ape\n",
      "Pan paniscus is an ape\n"
     ]
    }
   ],
   "source": [
    "for ape in apes:\n",
    "    print(ape + \" is an ape\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Homo sapiens is an ape. Its name starts with H\n",
      "Its name has 12 letters\n",
      "Pan troglodytes is an ape. Its name starts with P\n",
      "Its name has 15 letters\n",
      "Gorilla gorilla is an ape. Its name starts with G\n",
      "Its name has 15 letters\n",
      "Pan paniscus is an ape. Its name starts with P\n",
      "Its name has 12 letters\n"
     ]
    }
   ],
   "source": [
    "for ape in apes:\n",
    "    name_length = len(ape)\n",
    "    first_letter = ape[0]\n",
    "    print(ape + \" is an ape. Its name starts with \" + first_letter)\n",
    "    print(\"Its name has \" + str(name_length) + \" letters\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "one character is: m\n",
      "one character is: a\n",
      "one character is: r\n",
      "one character is: t\n",
      "one character is: i\n",
      "one character is: n\n"
     ]
    }
   ],
   "source": [
    "name = \"martin\"\n",
    "for character in name:\n",
    "    print(\"one character is: \" + character)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['melanogaster', 'simulans', 'yakuba', 'ananassae']\n"
     ]
    }
   ],
   "source": [
    "names = \"melanogaster,simulans,yakuba,ananassae\"\n",
    "species = names.split(\",\")\n",
    "print(str(species))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SampleID\tTreatement\tBodySite\tSubject\tsex\tDay\n",
      "\n",
      "H1-1\thigh\tstool\tsubject-1\t0\t0\n",
      "\n",
      "H1-2\thigh\tstool\tsubject-1\t0\t3\n",
      "\n",
      "H1-3\thigh\tstool\tsubject-1\t0\t6\n",
      "\n",
      "H1-4\thigh\tstool\tsubject-1\t0\t9\n",
      "\n",
      "L1-1\tlow\tstool\tsubject-1\t0\t0\n",
      "\n",
      "L1-2\tlow\tstool\tsubject-1\t0\t3\n",
      "\n",
      "L1-3\tlow\tstool\tsubject-1\t0\t6\n",
      "\n",
      "L1-4\tlow\tstool\tsubject-1\t0\t9\n",
      "\n",
      "H2-1\thigh\tstool\tsubject-2\t0\t0\n",
      "\n",
      "H2-2\thigh\tstool\tsubject-2\t0\t3\n",
      "\n",
      "H2-3\thigh\tstool\tsubject-2\t0\t6\n",
      "\n",
      "H2-4\thigh\tstool\tsubject-2\t0\t9\n",
      "\n",
      "L2-1\tlow\tstool\tsubject-2\t0\t0\n",
      "\n",
      "L2-2\tlow\tstool\tsubject-2\t0\t3\n",
      "\n",
      "L2-3\tlow\tstool\tsubject-2\t0\t6\n",
      "\n",
      "L2-4\tlow\tstool\tsubject-2\t0\t9\n",
      "\n",
      "H3-1\thigh\tstool\tsubject-3\t0\t0\n",
      "\n",
      "H3-2\thigh\tstool\tsubject-3\t0\t3\n",
      "\n",
      "H3-3\thigh\tstool\tsubject-3\t0\t6\n",
      "\n",
      "H3-4\thigh\tstool\tsubject-3\t0\t9\n",
      "\n",
      "L3-1\tlow\tstool\tsubject-3\t0\t0\n",
      "\n",
      "L3-2\tlow\tstool\tsubject-3\t0\t3\n",
      "\n",
      "L3-3\tlow\tstool\tsubject-3\t0\t6\n",
      "\n",
      "L3-4\tlow\tstool\tsubject-3\t0\t9\n",
      "\n",
      "H4-1\thigh\tstool\tsubject-4\t0\t0\n",
      "\n",
      "H4-2\thigh\tstool\tsubject-4\t0\t3\n",
      "\n",
      "H4-3\thigh\tstool\tsubject-4\t0\t6\n",
      "\n",
      "H4-4\thigh\tstool\tsubject-4\t0\t9\n",
      "\n",
      "L4-1\tlow\tstool\tsubject-4\t0\t0\n",
      "\n",
      "L4-2\tlow\tstool\tsubject-4\t0\t3\n",
      "\n",
      "L4-3\tlow\tstool\tsubject-4\t0\t6\n",
      "\n",
      "L4-4\tlow\tstool\tsubject-4\t0\t9\n",
      "\n",
      "H5-1\thigh\tstool\tsubject-5\t0\t0\n",
      "\n",
      "H5-2\thigh\tstool\tsubject-5\t0\t3\n",
      "\n",
      "H5-3\thigh\tstool\tsubject-5\t0\t6\n",
      "\n",
      "H5-4\thigh\tstool\tsubject-5\t0\t9\n",
      "\n",
      "L5-1\tlow\tstool\tsubject-5\t0\t0\n",
      "\n",
      "L5-2\tlow\tstool\tsubject-5\t0\t3\n",
      "\n",
      "L5-3\tlow\tstool\tsubject-5\t0\t6\n",
      "\n",
      "L5-4\tlow\tstool\tsubject-5\t0\t9\n",
      "\n",
      "H6-1\thigh\tstool\tsubject-6\t0\t0\n",
      "\n",
      "H6-2\thigh\tstool\tsubject-6\t0\t3\n",
      "\n",
      "H6-3\thigh\tstool\tsubject-6\t0\t6\n",
      "\n",
      "H6-4\thigh\tstool\tsubject-6\t0\t9\n",
      "\n",
      "L6-1\tlow\tstool\tsubject-6\t0\t0\n",
      "\n",
      "L6-2\tlow\tstool\tsubject-6\t0\t3\n",
      "\n",
      "L6-3\tlow\tstool\tsubject-6\t0\t6\n",
      "\n",
      "L6-4\tlow\tstool\tsubject-6\t0\t9\n",
      "\n",
      "H7-1\thigh\tstool\tsubject-7\t0\t0\n",
      "\n",
      "H7-2\thigh\tstool\tsubject-7\t0\t3\n",
      "\n",
      "H7-3\thigh\tstool\tsubject-7\t0\t6\n",
      "\n",
      "H7-4\thigh\tstool\tsubject-7\t0\t9\n",
      "\n",
      "L7-1\tlow\tstool\tsubject-7\t0\t0\n",
      "\n",
      "L7-2\tlow\tstool\tsubject-7\t0\t3\n",
      "\n",
      "L7-3\tlow\tstool\tsubject-7\t0\t6\n",
      "\n",
      "L7-4\tlow\tstool\tsubject-7\t0\t9\n"
     ]
    }
   ],
   "source": [
    "file = open(\"sample_Meta_data.txt\")\n",
    "for line in file:\n",
    "    print(line[0:56])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n"
     ]
    }
   ],
   "source": [
    "for number in range(6):\n",
    "    print(number)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
